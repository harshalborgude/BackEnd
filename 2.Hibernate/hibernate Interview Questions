Ways to get hibernate session:

1) Spring Boot2.0+

	1) Application.property :
		spring.datasource.url = jdbc:mysql://localhost:3308/test
		spring.datasource.username = root
		spring.datasource.password = root
		spring.jpa.show-sql = true
		spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.PhysicalNamingStrategyStandardImpl
		spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
		
	
	2) Code :
		
			@Autowired
			private EntityManagerFactory entityManagerFactory;
			
			public list getUserDetails(){
			
				Session session = entityManagerFactory.unwrap(SessionFactory.class).openSession();
				TypesQuery<Object> query = session.createSQLQuery("select * from emp");
				query.setParameter(k,v);
				NativeQueryImpl nativeQuery = (NativeQueryImpl) query;
				nativeQuery.setResultTransformer(AliasToEntityMapResultTransformer.INSTANCE);
				List<map<String,Object>> list = nativeQuery.getResultList();
				
			}

Hibernate Interview Questions : 

1) What is hibernate?
	Hibernate is an open-source and lightweight ORM tool that is used to store, manipulate, and retrieve data from the database.

2) What is ORM?
	ORM is an acronym for Object/Relational mapping. It is a programming strategy to map object with the data stored in the database. 
	It simplifies data creation, data manipulation, and data access.

3) Explain hibernate architecture?
	Hibernate architecture comprises of many interfaces such as Configuration, SessionFactory, Session, Transaction, etc.
	
4) What are the core interfaces of Hibernate?
	The core interfaces of Hibernate framework are:

	1) Configuration
	2) SessionFactory
	3) Session
	4) Query
	5) Criteria
	6) Transaction
	
5) Mention some of the advantages of using ORM over JDBC.
	ORM has the following advantages over JDBC:

	1) Application development is fast.
	2) Management of transaction.
	3) Generates key automatically.
	4) Details of SQL queries are hidden.
	
6) List some of the databases supported by Hibernate.
	Some of the databases supported by Hibernate are:

	1) DB2
	2) MySQL
	3) Oracle
	4) Sybase SQL Server
	5) Informix Dynamic Server
	6) HSQL
	7) PostgreSQL
	8) FrontBase
	
7) List the key components of Hibernate.
	Key components of Hibernate are:

	1) Configuration
	2) Session
	3) SessionFactory
	4) Criteria
	5) Query
	6) Transaction
	
8) How is SQL query created in Hibernate?
	The SQL query is created with the help of the following syntax: Session.createSQLQuery
	
9) How is HQL query created?
	The HQL query is created with the help of the following syntax : Session.createQuery
	
10) Define persistent classes.
	Classes whose objects are stored in a database table are called as persistent classes.

11) What is SessionFactory?
	SessionFactory provides the instance of Session. 
	It is a factory of Session. 
	It holds the data of second level cache that is not enabled by default.
	
12) Is SessionFactory a thread-safe object?
	Yes, SessionFactory is a thread-safe object, many threads cannot access it simultaneously.
	
13) Session
	- The session object provides an interface between the application and data stored in the database. 
	- It is a short-lived object and wraps the JDBC connection.
	- It is factory of Transaction, Query and Criteria. It holds a first-level cache (mandatory) of data. 
 	- The org.hibernate.Session interface provides methods to insert, update and delete the object. 
 	- It also provides factory methods for Transaction, Query and Criteria.

14) What is Session?
	It maintains a connection between the hibernate application and database.
	It provides methods to store, update, delete or fetch data from the database such as persist(), update(), delete(), load(), get() etc.
	It is a factory of Query, Criteria and Transaction i.e. it provides factory methods to return these instances. 
	Session is not a thread-safe object ,many threads can access it simultaneously. In other words, you can share it between threads.
	
15) What is the difference between session.save() and session.persist() method?
					save()										|		persist()
	1)	returns the identifier (Serializable) of the instance.	|	Return nothing because its return type is void.
	2)	Syn: public Serializable save(Object o)					|	Syn: public void persist(Object o)

16) What is the difference between get and load method?
	The differences between get() and load() methods are given below.

	No.					get()													|				load()
	1)	Returns null if an object is not found.									|	Throws ObjectNotFoundException if an object is not found.
	2)	get() method always hit the database.									|	load() method doesn't hit the database.
	3)	It returns the real object, not the proxy.								|	It returns proxy object.
	4)	It should be used if you are not sure about the existence of instance.	|	It should be used if you are sure that instance exists.

17) What is the difference between update and merge method?
	The differences between update() and merge() methods are given below.

	No.					The update() method										|		merge() method
	1)	Update means to edit something.	Merge means to combine something.		|	merge() should be used if you don't know the state of the session,
	2)	update() should be used if the session doesn't contain an already 		|	means you want to make the modification at any time.
		persistent state with the same id. It means an update should be used 	|
		inside the session only. After closing the session, it will throw 		|
			the error.															|
			

18) What are the states of the object in hibernate?
	There are 3 states of the object (instance) in hibernate.

	Transient: The object is in a transient state if it is just created but has no primary key (identifier) and not associated with a session.
	Persistent: The object is in a persistent state if a session is open, and you just saved the instance in the database or retrieved the instance from the database.
	Detached: The object is in a detached state if a session is closed. After detached state, the object comes to persistent state if you call lock() or update() method.
		
19) What are the inheritance mapping strategies?
	There are 3 ways of inheritance mapping in hibernate.

	1) Table per hierarchy - In table per hierarchy mapping, single table is required to map the whole hierarchy, an extra column (known as 
		discriminator column) is added to identify the class. But nullable values are stored in the table
	2) Table per concrete class - In case of table per concrete class, tables are created as per class. But duplicate column is added in subclass tables.
	3) Table per subclass - In this strategy, tables are created as per class but related by foreign key. So there are no duplicate columns.
	
20) How to make an immutable class in hibernate?
	If you mark a class as mutable="false", the class will be treated as an immutable class. By default, it is mutable="true"
	
21) What is automatic dirty checking in hibernate?
	The automatic dirty checking feature of Hibernate, calls update statement automatically on the objects that are modified in a transaction.
		
	
22) Is it possible to perform collection mapping with One-to-One and Many-to-One?
	No, collection mapping can only be performed with One-to-Many and Many-to-Many.
	
23) What is lazy loading in hibernate?
	Lazy loading in hibernate improves the performance. It loads the child objects on demand.
	Since Hibernate 3, lazy loading is enabled by default, and you don't need to do lazy="true". It means not to load the child objects 
		when the parent is loaded.
		
24) What is HQL (Hibernate Query Language)?
	Hibernate Query Language is known as an object-oriented query language. It is like a structured query language (SQL).

	The main advantage of HQL over SQL is:

	1) You don't need to learn SQL
	2) Database independent
	3) Simple to write a query
	
25) What is the difference between first level cache and second level cache?
	No.		First Level Cache							|			Second Level Cache
	1)	First Level Cache is associated with Session.	|	Second Level Cache is associated with SessionFactory.
	2)	It is enabled by default.						|	It is not enabled by default. 
	
	
26) Primary Key generation Strategies in hibernate ?

		@Id 
		@GeneratedValue(strategy = GenerationType.AUTO)   
		private Integer id;
	
	// IDENTITY, AUTO, SEQUENCE, TABLE
	
	1) IDENTITY :
		- It works like auto increament of primary keys.
		- Max value of primary key is depend upon what data type is given while declaring that column in entity table.
		- Will not work with oracle db.
			
	2) AUTO : 
		- with this it will create a squence table in database and using that it will generate primary keys.
		- sequence table maintains a next value , To be keep as next primary key for the table.
		- hibernate_sequence table will be created

	3) SEQUENCE :
		- Works same as AUTO only,
		- Will create a sequence table in database and will keep next primary key to be used.
		- hibernate_sequence table will be created
		
	4) TABLE : 
		- table , sequence , auto works similar in mySql.
		- Will create a sequence table in database and will keep next primary key to be used.
		- hibernate_sequences table will be created



27) How many types of association mapping are possible in hibernate?
	There can be 4 types of association mapping in hibernate.

	1) One to One
	2) One to Many
	3) Many to One
	4) Many to Many
	
	---------------------------------------------------------------------------------------------
	
	(Consider This 2 tables to explain Associate Mappings )
	
	Employee Table (Table 1 - Primary Table)
		- emp_id
		- emp_name
		- emp_sirname
		- emp_address : ( street, City, State, Country, Zip ) - columns of Emp_Address Table
		
	Employee_Address (Table 2 - Dependant Table)
		- Street
		- City
		- State
		- Country
		- Zip
	
	----------------------------------------------------------------------------------------------
	
	1) One to One : 
	
		- When 1 Employee from Employee table have 1 address then "OneToOne" mapping is used.
		
				// Table 1
				@Entity
				@Table(name="employee")
				public class Employee{
					
					
					@Id
					@GeneratedValue(strategy=GenerationType.Auto)
					@Column(name="emp_id")
					private Integer id;
					
					@Column(name="emp_name")
					private String emp_name
					
					.
					.
					
					@OneToOne(cascade=CascadeType.ALL)
					@JoinColumn(name="address_id")
					private Emp_Adrress emp_address;
				
				}
				
				
				// Table 2
				@Entity
				@Table(name="emp_address")
				public class Emp_Address{
					
					@Id
					@GeneratedValue(strategy=GenerationType.IDENTITY)
					@Column(name="emp_id")
					private Integer id;
					
					@Column(name="street")
					private String street;
					
					@Column(name="city")
					private String city;
					
					etc...
				
				}
			
		
		- SO considering above tables , Object of "Employee" table also consist Object of "Emp_Address" Table, That is mapped using "OneToOne"
			mapping.
		- Both tables have joined using "id" : @JoinColumn(name="address_id")
		- Whenever we try to save Object of Employee , Object of Address will not be saved as it is the another table so to solve that have to
			use "cascade" option with "OneToOne" mapping 
			
			@OneToOne(cascade=CascadeType.ALL)
			
			- here if we use CascadeType.Persist then we will be only able to save this object with persist method only, With All can be
				able to save using all ways.like save , persist etc.
				
				Cascade Types : Persist , Merge, Detached, All , etc
				
		- In Employee Table , only Address_Id will be stored which will refer Address Table.
		
		
	----------------------------------------------------------------------------------------------
	
	2) One to Many : 
		
		- 1 Department can Have many employees so ,here Relation will be 1 to many
		- Department entity will be having list of employees ( One dept table having many employees )
		
				// Table 1
				@Entity
				@Table(name="department_table")
				public class Department{
					
					@Id
					@GeneratedValue(strategy=GenerationType.IDENTITY)
					@Column(name="department_id")
					private Integer departmentId;
					
					@Column(name="department_name")
					private String department_name;
					
					.
					.
					// Only required if we want to create 3rd joining table.
					//@JoinTable(name="department_employee_table",JoinColumns=@JoinColumn(name="department_id"),inverseJoinColumns=@JoinColumn(name="emp_id"))
					
					@OneToMany(cascade=CascadeType.ALL,mappedBy="dept_id")
					private List<Employee> empList = new ArrayList<Employee>();
				}
				
				// Table 2
				@Entity
				@Table(name="employee")
				public class Employee{
					
					
					@Id
					@GeneratedValue(strategy=GenerationType.Auto)
					@Column(name="emp_id")
					private Integer id;
					
					@Column(name="emp_name")
					private String emp_name
					
					@Column(name="emp_name",unique=true)
					private String emp_name
					.
					
					@JoinColumn(name="dept_id")
					@ManyToOne(cascade=CascadeType.ALL)
					private String dept_id;
				}
		
		- So here hibernate will create 3 tables , "Department Table" , "Department_Employee" joint table and "Employee table" bcz of OneToMany relation.
		- inside joint table it will have keys of both table.
		- So whenever we will create Object of department table , so in that object we can save list of Employees , And when we do Save Operation
			then it will insert 1 value in department table and n values in employee table based on number of employees.
		- after updating both table , it will also update 3rd joint table also with all the keys of dept_id and respective all the emp_id's so 
			if 3 emp is added then it will add 3 rows with same dept_id and 3 diff emp_id's 
			jointTable = dept_id (1,1,1) , emp_id(1,2,3) , like this data will be there in joint table
		- So here 3 tables will be created and 3rd table only consists the relations of dept and employee tables.
				@JoinTable(name="department_employee_table",
								JoinColumns=@JoinColumn(name="department_id"),inverseJoinColumns=@JoinColumn(name="emp_id"))
		- using above @JoinTable annotation we can provide name to that joint table and also to columns of that table also.
		- SO here from department perspective, OneToMany mapping is valid.
		- and from employees perspective , ManyToOne mapping is valid.
		- Creation of that 3rd joint table is not mandatory to maintain, that we can adjust in our employee tables as its on "Many" side.
		- SO to do that , we will have to add 1 column in Employee table i.e "dept_id".We will not able to add emp_id in dept table as it will create 
			to many repeated columns.
		- We can remove that @JoinTable() annotation from dept table if we dont want joining table.
		- So we will have to add 1 column in employee table with "dept_id" name , and if we look from employee table to dept table, 
			many clms of employee table belongs to 1 clm of Dept table , 
		- so here @ManyToOne relation will be there from employee table perspective.
			
				@JoinColumn(name="dept_id")
				@ManyToOne(cascade=CascadeType.ALL)
				private String dept_id;

		- In employee table we have to add @OneToMany annotation with (mappedBy="dept_id") argument with mapped tables id var name, if we dont give this argument, 
			then hibernate will again create joining table. SO here OneToMany association will be created by looking this 2 annotations
				
					// Table 1
					@OneToMany(cascade=CascadeType.ALL,mappedBy="dept_id")
					private List<Employee> empList = new ArrayList<Employee>();
					
					// Table 2
					@JoinColumn(name="dept_id")
					@ManyToOne(cascade=CascadeType.ALL)
					private String dept_id;
				
				
		- So now here while storing data , We have to store employee objects inside dept table as well , department objects reference in employee objects also.

		
	----------------------------------------------------------------------------------------------
	
	3) Many to Many ( Unidirectional ) : 
		
		- 
		
		
		
		